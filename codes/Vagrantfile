# -*- mode: ruby -*-
# vi: set ft=ruby :
manage_host = true
manage_guest = true
private_net_prefix='192.168.50'
domain="example.com"
hosts={
  master1:{
    hostname: "ker001.#{domain}",
    aliases: "kerberos1.example.com",
    #memory: 1024,
    private_ip: "#{private_net_prefix}.2",
    provision:
      <<-SCRIPT
        sudo sed -i 's/^SELINUX=.*/SELINUX=disabled/' /etc/selinux/config
        sudo setenforce 0
        sudo yum install openldap-clients vim -y
        sudo mkdir -p /var/lib/ldap/{data,deltalog,log}
      SCRIPT
  },
  master2:{
    hostname: "ker002.#{domain}",
    aliases: "kerberos2.example.com",
    #memory: 1024,
    private_ip: "#{private_net_prefix}.3",
    provision:
      <<-SCRIPT
        sudo sed -i 's/^SELINUX=.*/SELINUX=disabled/' /etc/selinux/config
        sudo setenforce 0
        sudo yum install openldap-clients vim -y
        sudo mkdir -p /var/lib/ldap/{data,deltalog,log}
      SCRIPT
  },
  master3:{
    hostname: "ker003.#{domain}",
    aliases: "kerberos3.example.com",
    #memory: 1024,
    private_ip: "#{private_net_prefix}.4",
    provision:
      <<-SCRIPT
        sudo sed -i 's/^SELINUX=.*/SELINUX=disabled/' /etc/selinux/config
        sudo setenforce 0
        sudo yum install openldap-clients vim -y
        sudo mkdir -p /var/lib/ldap/{data,deltalog,log}
      SCRIPT
  },
}

if Gem::Version.new(::Vagrant::VERSION) < Gem::Version.new('1.5')
  Vagrant.require_plugin('vagrant-hostmanager')
end

Vagrant.configure('2') do |config|

  if ENV.key? 'VAGRANT_BOX'
    config.vm.box = ENV['VAGRANT_BOX']
  else
    config.vm.box = 'centos/7'
  end

  config.hostmanager.enabled = true
  config.hostmanager.manage_host = manage_host
  config.hostmanager.manage_guest = manage_guest

  hosts.each do |name,prop|
    config.vm.define name do |server|
      server.vm.hostname = prop[:hostname] if prop[:hostname]
      if prop[:private_ip]
        server.vm.network :private_network, :ip => prop[:private_ip]
      end
      server.hostmanager.aliases = prop[:aliases] if prop[:aliases]
      if prop[:memory]
        server.vm.provider "virtualbox" do |vb|
          vb.memory = prop[:memory]
        end
      end
      server.vm.provision "shell", inline: prop[:provision] if prop[:provision]
    end
  end
end


